---
AWSTemplateFormatVersion: 2010-09-09

Description: IRAP PROTECTED Reference Architecture

Metadata:
  LICENSE: Apache License, Version 2.0 
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: General configuration
        Parameters:
          - TagPrefix
      - Label:
          default: Network configuration
        Parameters:
          - VPCCIDR
          - PublicSubnet1
          - PublicSubnet2
          - PublicSubnet3
          - PrivateSubnet1
          - PrivateSubnet2
          - PrivateSubnet3
          - DatabaseSubnet1
          - DatabaseSubnet2
          - DatabaseSubnet3
          - LmbdSubnet1
          - LmbdSubnet2
          - LmbdSubnet3
      - Label:
          default: Auto Scaling Group configuration
        Parameters:
          - KeyPairName
          - ImageId
      - Label:
          default: ELB configuration
        Parameters:
          - LoadBalancerDeregistrationDelay
          - ALBScheme
          - NLBScheme
      - Label:
          default: IAM configuration
        Parameters:
          - CloudwatchAgentServerManagedPolicy
      - Label:
          default: WAF configuration
        Parameters:
          - IncludesPrefix
          - AdminUrlPrefix
          - AdminRemoteCidr
          - RuleAction
          - MaxExpectedURISize
          - MaxExpectedQueryStringSize
          - MaxExpectedBodySize
          - MaxExpectedCookieSize
          - CSRFExpectedHeader
          - CSRFExpectedSize
      - Label:
          default: RDS configuration
        Parameters:
          - DBName
          - DBUser
          - DBPassword
          - DBAllocatedStorage
          - DBInstanceClass
          - MultiAZ
      - Label:
          default: Lambda configuration
        Parameters:
          - LambdaBucket
          - LambdaZipsBucket
          - LambdaZipFile
          - ALBListenerPort
          - MAXDNSLookupPerInvocation
          - InvocationBeforeDeregistration
          - CWMetricFlagIPCount
      - Label:
          default: Guard Duty configuration
        Parameters:
          - SnsEmail
      - Label:
          default: KMS configuration
        Parameters:
          - KMSAdmin
          - KMSUser
    ParameterLabels:
      ALBListenerPort:
        default: ALB Listener port
      ALBScheme:
        default: Set ALB as internet-facing or internal-only
      AdminRemoteCidr:
        default: IP address allowed by WAF to access your administrative interface
      AdminUrlPrefix:
        default: URI path prefix that identifies your administrative sub-site for WAF
      CSRFExpectedHeader:
        default: The custom HTTP request header, where the CSRF token value is expected to be encountered
      CSRFExpectedSize:
        default: The size in bytes of the CSRF token value
      CWMetricFlagIPCount:
        default: Create a CloudWatch metric to track IP count of your internal ALB
      CloudwatchAgentServerManagedPolicy:
        default: ARN of the CloudWatch managed policy
      DBAllocatedStorage:
        default: The size of the database
      DBInstanceClass:
        default: The database instance type
      DBName:
        default: The database name
      DBPassword:
        default: The database password
      DBUser:
        default: The database admin account username
      DatabaseSubnet1:
        default: CIDR block for the database subnet in AZ1
      DatabaseSubnet2:
        default: CIDR block for the database subnet in AZ2
      DatabaseSubnet3:
        default: CIDR block for the database subnet in AZ3
      ImageId:
        default: The AMI image ID that will be used for EC2 instances
      IncludesPrefix:
        default: URI path prefix for WAF that identifies server-side included components
      InvocationBeforeDeregistration:
        default: Number of Lambda invocations needed before an IP is deregistered
      KMSAdmin:
        default: IAM user with ability to administer KMS key
      KMSUser:
        default: IAM user with ability to use KMS key
      KeyPairName:
        default: EC2 keypair name
      LambdaBucket:
        default: S3 bucket that the ALB/NLB update Lambda function writes to
      LambdaZipFile:
        default: The name of the ALB/NLB update Lambda function zipfile
      LambdaZipsBucket:
        default: The S3 bucket containing the ALB/NLB update Lambda function zipfile
      LmbdSubnet1:
        default: CIDR block for the Lambda subnet in AZ1
      LmbdSubnet2:
        default: CIDR block for the Lambda subnet in AZ2
      LmbdSubnet3:
        default: CIDR block for the Lambda subnet in AZ3
      LoadBalancerDeregistrationDelay:
        default: Time to wait before marking target as unused
      MAXDNSLookupPerInvocation:
        default: The max DNS lookups the ALB/NLB update function can perform per invocation
      MaxExpectedBodySize:
        default: Maximum number of bytes allowed by the WAF in the body of the request
      MaxExpectedCookieSize:
        default: Maximum number of bytes allowed by the WAF in the cookie header
      MaxExpectedQueryStringSize:
        default: Maximum number of bytes allowed by the WAF in the query string component of the HTTP request
      MaxExpectedURISize:
        default: Maximum number of bytes allowed by the WAF in the URI component of the HTTP request
      MultiAZ:
        default: Set the RDS instance as Multi-AZ
      NLBScheme:
        default: Set ALB as internet-facing or internal-only
      PrivateSubnet1:
        default: CIDR block for the Private subnet in AZ1
      PrivateSubnet2:
        default: CIDR block for the Private subnet in AZ2
      PrivateSubnet3:
        default: CIDR block for the Private subnet in AZ3
      PublicSubnet1:
        default: CIDR block for the Public subnet in AZ1
      PublicSubnet2:
        default: CIDR block for the Public subnet in AZ2
      PublicSubnet3:
        default: CIDR block for the Public subnet in AZ3
      RuleAction:
        default: COUNT or BLOCK for WAF action
      SnsEmail:
        default: Email address to send Guard Duty alerts
      TagPrefix:
        default: Prefix to prepend to Tags
      VPCCIDR:
        default: CIDR block for the VPC

Parameters:
### Networking Parameters ###
  VPCCIDR:
    Type: String
    Description: CIDR block for the VPC
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 172.21.1.0/24)
    Default: '10.0.0.0/16'
  PublicSubnet1:
    Type: String
    Description: CIDR block for the public subnet in AZ1
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 172.21.1.0/26)
    Default: '10.0.1.0/24'
  PublicSubnet2:
    Type: String
    Description: CIDR block for the public subnet in AZ2
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 172.21.1.64/26)
    Default: '10.0.2.0/24'
  PublicSubnet3:
    Type: String
    Description: CIDR block for the public subnet in AZ3
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 172.21.1.64/26)
    Default: '10.0.3.0/24'
  PrivateSubnet1:
    Type: String
    Description: CIDR block for the private subnet in AZ1
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 172.21.1.128/26)
    Default: '10.0.11.0/24'
  PrivateSubnet2:
    Type: String
    Description: CIDR block for the private subnet in AZ2
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 172.21.1.192/26)
    Default: '10.0.12.0/24'
  PrivateSubnet3:
    Type: String
    Description: CIDR block for the private subnet in AZ3
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 172.21.1.192/26)
    Default: '10.0.13.0/24'
  DatabaseSubnet1:
    Type: String
    Description: CIDR block for the database subnet in AZ1
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 172.21.1.128/26)
    Default: '10.0.21.0/24'
  DatabaseSubnet2:
    Type: String
    Description: CIDR block for the database subnet in AZ2
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 172.21.1.192/26)
    Default: '10.0.22.0/24'
  DatabaseSubnet3:
    Type: String
    Description: CIDR block for the database subnet in AZ3
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 172.21.1.192/26)
    Default: '10.0.23.0/24'
  LmbdSubnet1:
    Type: String
    Description: CIDR block for the Lambda subnet in AZ1
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 172.21.1.128/26)
    Default: '10.0.31.0/24'
  LmbdSubnet2:
    Type: String
    Description: CIDR block for the Lambda subnet in AZ2
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 172.21.1.192/26)
    Default: '10.0.32.0/24'
  LmbdSubnet3:
    Type: String
    Description: CIDR block for the Lambda subnet in AZ3
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 172.21.1.192/26)
    Default: '10.0.33.0/24'
### Generic Parameters ###
  TagPrefix:
    Description: Prefix that will be prepended to Tags
    Type: String
### ASG Parameters ###
  KeyPairName:
    Description: EC2 keypair name
    Type: String
  ImageId:
    Description: The AMI image ID that will be used for EC2 instances
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2'
### ELB Parameters ###
  LoadBalancerDeregistrationDelay:
    Description: 'The amount time (in seconds) to wait before changing the state of a deregistering target from draining to unused.'
    Type: Number
    Default: 60
    ConstraintDescription: 'Must be in the range [0-3600]'
    MinValue: 0
    MaxValue: 3600
  ALBScheme:
    Description: 'Indicates whether the load balancer in front of the ECS service is internet-facing or internal.'
    Type: String
    Default: 'internal'
    AllowedValues:
    - 'internet-facing'
    - internal
  NLBScheme:
    Description: 'Indicates whether the load balancer in front of the ECS service is internet-facing or internal.'
    Type: String
    Default: 'internet-facing'
    AllowedValues:
    - 'internet-facing'
    - internal
  # LoadBalancerCertificateArn:                                    ### Uncomment this if you wish to enable HTTPS for your ALB
  #   Description: 'Amazon Resource Name (ARN) of the certificate to associate with the load balancer.'
  #   Type: String
  #   Default: ''
### IAM Parameters ###
  CloudwatchAgentServerManagedPolicy:
    Description: The ARN of the managed policy that allows EC2 instances to write to CloudWatch.
    Type: String
    Default: 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
### WAF Parameters ###
  IncludesPrefix:
    Type: String
    Description: This is the URI path prefix (starting with '/') that identifies any files in your webroot that are server-side included components, and should not be invoked directly via URL. These can be headers, footers, 3rd party server side libraries or components. You can add additional prefixes later directly in the set.
    Default: /includes
  AdminUrlPrefix:
    Type: String
    Description: This is the URI path prefix (starting with '/') that identifies your administrative sub-site. You can add additional prefixes later directly in the set.
    Default: /admin
  AdminRemoteCidr:
    Type: String
    Description: This is the IP address allowed to access your administrative interface. Use CIDR notation. You can add additional ones later directly in the set.
    Default: 127.0.0.1/32
  RuleAction:
    Type: String
    Description: The type of action you want to iplement for the rules in this set. Valid options are COUNT or BLOCK.
    AllowedValues:
      - BLOCK
      - COUNT
    Default: BLOCK
  MaxExpectedURISize:
    Type: Number
    Description: Maximum number of bytes allowed in the URI component of the HTTP request. Generally the maximum possible value is determined by the server operating system (maps to file system paths), the web server software, or other middleware components. Choose a value that accomodates the largest URI segment you use in practice in your web application.
    Default: 512
  MaxExpectedQueryStringSize:
    Type: Number
    Description: Maximum number of bytes allowed in the query string component of the HTTP request. Normally the  of query string parameters following the "?" in a URL is much larger than the URI , but still bounded by the  of the parameters your web application uses and their values.
    Default: 1024
  MaxExpectedBodySize:
    Type: Number
    Description: Maximum number of bytes allowed in the body of the request. If you do not plan to allow large uploads, set it to the largest payload value that makes sense for your web application. Accepting unnecessarily large values can cause performance issues, if large payloads are used as an attack vector against your web application.
    Default: 4096
  MaxExpectedCookieSize:
    Type: Number
    Description: Maximum number of bytes allowed in the cookie header. The maximum size should be less than 4096, the size is determined by the amount of information your web application stores in cookies. If you only pass a session token via cookies, set the size to no larger than the serialized size of the session token and cookie metadata.
    Default: 4093
  CSRFExpectedHeader:
    Type: String
    Description: The custom HTTP request header, where the CSRF token value is expected to be encountered
    Default: x-csrf-token
  CSRFExpectedSize:
    Type: Number
    Description: The size in bytes of the CSRF token value. For example if it's a canonically formatted UUIDv4 value the expected size would be 36 bytes/ASCII characters
    Default: 36
### RDS Parameters ###
  DBName:
    Default: MyDatabase
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBUser:
    NoEcho: 'true'
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBPassword:
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]+'
    ConstraintDescription: must contain only alphanumeric characters.
  DBAllocatedStorage:
    Default: '5'
    Description: The size of the database (GB)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 5 and 1024Gb.
  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t2.small
    AllowedValues: [db.t1.micro, db.m1.small, db.m1.medium, db.m1.large, db.m1.xlarge,
      db.m2.xlarge, db.m2.2xlarge, db.m2.4xlarge, db.m3.medium, db.m3.large, db.m3.xlarge,
      db.m3.2xlarge, db.m4.large, db.m4.xlarge, db.m4.2xlarge, db.m4.4xlarge, db.m4.10xlarge,
      db.r3.large, db.r3.xlarge, db.r3.2xlarge, db.r3.4xlarge, db.r3.8xlarge, db.m2.xlarge,
      db.m2.2xlarge, db.m2.4xlarge, db.cr1.8xlarge, db.t2.micro, db.t2.small, db.t2.medium,
      db.t2.large]
    ConstraintDescription: must select a valid database instance type.
  MultiAZ:
    Description: Whether the RDS instance should be Multi-AZ (set to 'true' for prod)
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    ConstraintDescription: must be true or false.
### ALB/NLB Lambda Parameters ###
  LambdaBucket:
    Description: The bucket that your Lambda function writes to
    Type: String
  LambdaZipsBucket:
    Description: The bucket where your Lambda function zipfile is stored
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    Type: String
  LambdaZipFile:
    Default: 'populate_NLB_TG_with_ALB.zip'
    Description: The key of your Lambda function zipfile
    Type: String
  ALBListenerPort:
    Description: Enter the traffic listener port of your internal Application Load
      Balancer
    Type: String
    Default: '80'
  MAXDNSLookupPerInvocation:
    Description: The max DNS lookup this function can perform per invocation
    Type: Number
    Default: 50
  InvocationBeforeDeregistration:
    Description: How many invocations are needed before a IP is deregistered
    Type: Number
    Default: 3
  CWMetricFlagIPCount:
    Description: Whether you want the Lambda function to create a CloudWatch
      metric to track IP count of your internal Application Load Balancer
    Type: String
    Default: 'True'
    AllowedValues:
      - 'True'
      - 'False'
### GuardDuty Parameters ###
  SnsEmail:
    Description: Specify destination for GuardDuty email alerts
    Type: String
### KMS Parameters ###
  KMSAdmin:
    Description: User with ability to administer KMS key
    Type: String
  KMSUser:
    Description: User with ability to use KMS key
    Type: String

Resources:

### VPC ###

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock:
        Ref: VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:
            Ref: TagPrefix

### Public Subnets ###

  PubSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PublicSubnet1
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-PublicSubnet1

  PubSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PublicSubnet2
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}b
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-PublicSubnet2

  PubSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PublicSubnet3
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}c
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-PublicSubnet3

### Private Subnets ###

  PriSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnet1
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}a
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-PrivateSubnet1

  PriSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnet2
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}b
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-PrivateSubnet2

  PriSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnet3
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}c
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-PrivateSubnet3

### Database Subnets ###

  DBSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: DatabaseSubnet1
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}a
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-DBSubnet1

  DBSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: DatabaseSubnet2
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}b
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-DBSubnet2

  DBSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: DatabaseSubnet3
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}c
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-DBSubnet3

### Lambda Subnets ###

  LambdaSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: LmbdSubnet1
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}a
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-LambdaSubnet1

  LambdaSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: LmbdSubnet2
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}b
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-LambdaSubnet2

  LambdaSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: LmbdSubnet3
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}c
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-LambdaSubnet3

### IGW ###

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-IGW

  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

### NAT ###

  NATEIP1:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
    DependsOn: GatewayToInternet

  NAT1:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt: [ NATEIP1, AllocationId ]
      SubnetId:
        Ref: PubSubnet1
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${TagPrefix}-NatGw1

        ### Uncomment these lines to use multi-AZ NAT Gateways ###
  # NATEIP2:
  #   Type: "AWS::EC2::EIP"
  #   Properties:
  #     Domain: vpc
  #   DependsOn: GatewayToInternet

  # NAT2:
  #   Type: "AWS::EC2::NatGateway"
  #   Properties:
  #     AllocationId:
  #       Fn::GetAtt: [ NATEIP2, AllocationId ]
  #     SubnetId:
  #       Ref: PubSubnet2
  #     Tags:
  #     - Key: Name
  #       Value:
  #         Fn::Sub: ${TagPrefix}-NatGw2

  # NATEIP3:
  #   Type: "AWS::EC2::EIP"
  #   Properties:
  #     Domain: vpc
  #   DependsOn: GatewayToInternet

  # NAT3:
  #   Type: "AWS::EC2::NatGateway"
  #   Properties:
  #     AllocationId:
  #       Fn::GetAtt: [ NATEIP3, AllocationId ]
  #     SubnetId:
  #       Ref: PubSubnet3
  #     Tags:
  #     - Key: Name
  #       Value:
  #         Fn::Sub: ${TagPrefix}-NatGw3
        ### End of NAT Gateway section ###

### Route Tables ###

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-PublicRouteTable

  PrivateRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-PrivateRouteTable1

  PrivateRouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-PrivateRouteTable2

  PrivateRouteTable3:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-PrivateRouteTable3

  DBRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-DBRouteTable


  LambdaRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-LambdaRouteTable1

  LambdaRouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-LambdaRouteTable2

  LambdaRouteTable3:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-LambdaRouteTable3

### Routes ###

  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: GatewayToInternet
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTable

  PrivateRoute1:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT1
      RouteTableId:
        Ref: PrivateRouteTable1

  PrivateRoute2:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT1                   # Change this to NAT2 if implementing additional NAT Gateways
      RouteTableId:
        Ref: PrivateRouteTable2

  PrivateRoute3:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT1                   # Change this to NAT3 if implementing additional NAT Gateways
      RouteTableId:
        Ref: PrivateRouteTable3

  DBRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT1
      RouteTableId:
        Ref: DBRouteTable

  LambdaRoute1:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT1
      RouteTableId:
        Ref: LambdaRouteTable1

  LambdaRoute2:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT1                   # Change this to NAT2 if implementing additional NAT Gateways
      RouteTableId:
        Ref: LambdaRouteTable2

  LambdaRoute3:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT1                   # Change this to NAT3 if implementing additional NAT Gateways
      RouteTableId:
        Ref: LambdaRouteTable3

### Route Table Subnet Associations ###

  PubSubnet1RTAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PubSubnet1

  PubSubnet2RTAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PubSubnet2

  PubSubnet3RTAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PubSubnet3

  PrivSubnet1RTAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable1
      SubnetId:
        Ref: PriSubnet1

  PrivSubnet2RTAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable2
      SubnetId:
        Ref: PriSubnet2

  PrivSubnet3RTAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable3
      SubnetId:
        Ref: PriSubnet3

  DBSubnet1RTAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: DBRouteTable
      SubnetId:
        Ref: DBSubnet1

  DBSubnet2RTAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: DBRouteTable
      SubnetId:
        Ref: DBSubnet2

  DBSubnet3RTAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: DBRouteTable
      SubnetId:
        Ref: DBSubnet3

  LambdaSubnet1RTAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: LambdaRouteTable1
      SubnetId:
        Ref: LambdaSubnet1

  LambdaSubnet2RTAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: LambdaRouteTable2
      SubnetId:
        Ref: LambdaSubnet2

  Lambda3RTAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: LambdaRouteTable3
      SubnetId:
        Ref: LambdaSubnet3

### RDS Subnet Groups ###

  RDSSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "RDS DB Subnet group"
      SubnetIds:
        - Ref: DBSubnet1
        - Ref: DBSubnet2
        - Ref: DBSubnet3
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-DBSubnetGroup

### Jumpbox ###

  JumpBox:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId:
        Ref: ImageId
      InstanceType: 't2.micro'
      KeyName:
        Ref: KeyPairName
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet: 
            - Ref: JumpboxSecurityGroup
          SubnetId: !Ref PubSubnet3
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-JumpBox

### Launch Configuration ###

  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
            - 04_install_httpd
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
        # Definition of json configuration of AmazonCloudWatchAgent, you can change the configuration below.
        02_config-amazon-cloudwatch-agent:
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
              content: !Sub |
                    {
                      "agent": {
                        "metrics_collection_interval": 10,
                        "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                        "region": "ap-southeast-2"
                      },
                      "metrics": {
                        "metrics_collected": {
                          "cpu": {
                            "resources": [
                              "*"
                            ],
                            "measurement": [
                              {"name": "cpu_usage_idle", "rename": "CPU_USAGE_IDLE", "unit": "Percent"},
                              {"name": "cpu_usage_nice", "unit": "Percent"},
                              "cpu_usage_guest"
                            ],
                            "totalcpu": false,
                            "metrics_collection_interval": 10,
                            "append_dimensions": {
                              "customized_dimension_key_1": "customized_dimension_value_1",
                              "customized_dimension_key_2": "customized_dimension_value_2"
                            }
                          },
                          "disk": {
                            "resources": [
                              "/",
                              "/tmp"
                            ],
                            "measurement": [
                              {"name": "free", "rename": "DISK_FREE", "unit": "Gigabytes"},
                              "total",
                              "used"
                            ],
                            "ignore_file_system_types": [
                              "sysfs", "devtmpfs"
                            ],
                            "metrics_collection_interval": 60,
                            "append_dimensions": {
                              "customized_dimension_key_3": "customized_dimension_value_3",
                              "customized_dimension_key_4": "customized_dimension_value_4"
                            }
                          },
                          "diskio": {
                            "resources": [
                              "*"
                            ],
                            "measurement": [
                              "reads",
                              "writes",
                              "read_time",
                              "write_time",
                              "io_time"
                            ],
                            "metrics_collection_interval": 60
                          },
                          "swap": {
                            "measurement": [
                              "swap_used",
                              "swap_free",
                              "swap_used_percent"
                            ]
                          },
                          "mem": {
                            "measurement": [
                              "mem_used",
                              "mem_cached",
                              "mem_total"
                            ],
                            "metrics_collection_interval": 1
                          },
                          "net": {
                            "resources": [
                              "eth0"
                            ],
                            "measurement": [
                              "bytes_sent",
                              "bytes_recv",
                              "drop_in",
                              "drop_out"
                            ]
                          },
                          "netstat": {
                            "measurement": [
                              "tcp_established",
                              "tcp_syn_sent",
                              "tcp_close"
                            ],
                            "metrics_collection_interval": 60
                          },
                          "processes": {
                            "measurement": [
                              "running",
                              "sleeping",
                              "dead"
                            ]
                          }
                        },
                        "append_dimensions": {
                          "ImageId": "${!aws:ImageId}",
                          "InstanceId": "${!aws:InstanceId}",
                          "InstanceType": "${!aws:InstanceType}",
                          "AutoScalingGroupName": "${!aws:AutoScalingGroupName}"
                        },
                        "aggregation_dimensions" : [["ImageId"], ["InstanceId", "InstanceType"], ["d1"],[]],
                        "force_flush_interval" : 30
                      },
                      "logs": {
                        "logs_collected": {
                          "files": {
                            "collect_list": [
                              {
                                "file_path": "/var/log/httpd/access_log",
                                "log_group_name": "protected_ec2_stack",
                                "log_stream_name": "protected_ec2_apache_access",
                                "timezone": "UTC"
                              },
                              {
                                "file_path": "/var/log/httpd/error_log",
                                "log_group_name": "protected_ec2_stack",
                                "log_stream_name": "protected_ec2_apache_error",
                                "timezone": "UTC"
                              }
                            ]
                          }
                        },
                        "log_stream_name": "my_log_stream_name",
                        "force_flush_interval" : 15
                      }
                    }
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        # Install nginx
        04_install_httpd:
          commands:
            01_install_httpd:
              command: yum install -y httpd24 php56 php56-mysqlnd
            02_set_website_content: 
              command: echo '<html><h1>Welcome to your httpd website</h1></html>' > /var/www/html/index.html
            03_set_website_php_content:
              command: echo '<?php phpinfo(); ?>' > /var/www/html/info.php
            04_start_service:
              command: service httpd start && chkconfig httpd on                  
                
        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        01_setupCfnHup:
          files:
             '/etc/cfn/cfn-hup.conf':
               content: !Sub |
                 [main]
                 stack=${AWS::StackId}
                 region=${AWS::Region}
                 interval=1
               mode: '000400'
               owner: root
               group: root
             '/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf':
               content: !Sub |
                 [cfn-auto-reloader-hook]
                 triggers=post.update
                 path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                 action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource LaunchConfiguration --region ${AWS::Region} --configsets UpdateEnvironment
                 runas=root
               mode: '000400'
               owner: root
               group: root
             "/lib/systemd/system/cfn-hup.service":
                content: !Sub |
                  [Unit]
                  Description=cfn-hup daemon
                  [Service]
                  Type=simple
                  ExecStart=/opt/aws/bin/cfn-hup
                  Restart=always
                  [Install]
                  WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: !Sub |
                service cfn-hup start
            02start_cfn_hup:
              command: !Sub |
                chkconfig cfn-hup on
    Properties:
      AssociatePublicIpAddress: false
      BlockDeviceMappings:
        - DeviceName: '/dev/xvdf'
          Ebs:
            VolumeSize: 5
            Encrypted: true
      EbsOptimized: false
      ImageId: !Ref ImageId
      InstanceType: 't2.micro'
      IamInstanceProfile: !Ref ASGIamInstanceProfile
      SecurityGroups:
      - !Ref AppServerSG
      KeyName: !Ref KeyPairName
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ex
          sudo yum update -y
          sudo mkfs -t ext4 /dev/xvdf
          sudo mkdir -p /var/www/html/data
          sudo mount /dev/xvdf /var/www/html/data
          UUID=`sudo blkid | grep xvdf | awk '{print $2;}' | sed 's/UUID="//' | tr -d '"'`
          echo "UUID=$UUID  /var/www/html  ext4  defaults,nofail  0  2" | sudo tee -a /etc/fstab
          rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource LaunchConfiguration --region ${AWS::Region} --configsets default
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource LaunchConfiguration --region ${AWS::Region}

### ASG ###

  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
        - !Ref PriSubnet1
        - !Ref PriSubnet2
        - !Ref PriSubnet3
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: '2'
      MinSize: '1'
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${TagPrefix}-ASG
        PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref DefaultTargetGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        SuspendProcesses:
        - HealthCheck
        - ReplaceUnhealthy
        - AZRebalance
        - AlarmNotification
        - ScheduledActions

  ASGIamRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref CloudwatchAgentServerManagedPolicy         
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${TagPrefix}-ASGRole

  ASGIamInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - 
          Ref: "ASGIamRole"

### ALB ####

  DefaultTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 80
      Protocol: HTTP
      VpcId: !Ref 'VPC'
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: !Ref LoadBalancerDeregistrationDelay
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${TagPrefix}-ALBTargetGroup


  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: !Ref ALBScheme
      SecurityGroups:
      - !Ref ELBSecurityGroup
      Subnets:
        - !Ref PubSubnet1
        - !Ref PubSubnet2
        - !Ref PubSubnet3
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${TagPrefix}-ALB
      
  HttpListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref DefaultTargetGroup
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # HttpsListener:                                    ### Uncomment this if you wish to enable HTTPS for your ALB
  #   Type: 'AWS::ElasticLoadBalancingV2::Listener'
  #   Properties:
  #     Certificates:
  #     - CertificateArn: !Ref LoadBalancerCertificateArn
  #     DefaultActions:
  #     - TargetGroupArn: !Ref DefaultTargetGroup
  #       Type: forward
  #     LoadBalancerArn: !Ref LoadBalancer
  #     Port: 443
  #     Protocol: HTTPS

### NLB ###

  NLBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Protocol: TCP
      Port: 80
      VpcId: !Ref 'VPC'
      TargetType: 'ip'
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: !Ref LoadBalancerDeregistrationDelay
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${TagPrefix}-NLBTargetGroup

  NetworkLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: !Ref NLBScheme
      Type: network
      LoadBalancerAttributes:
      - Key: load_balancing.cross_zone.enabled
        Value: 'true'
      Subnets:
        - !Ref PubSubnet1
        - !Ref PubSubnet2
        - !Ref PubSubnet3
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${TagPrefix}-NLB
      
  NLBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref NLBTargetGroup
        Type: forward
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 80
      Protocol: TCP

### NLB/ALB Update Lambda ###

  ### From here: https://aws.amazon.com/blogs/networking-and-content-delivery/using-static-ip-addresses-for-application-load-balancers/ ###

  UpdateALBFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Register Application Load Balancer to Network Load Balancer
      Handler: populate_NLB_TG_with_ALB.lambda_handler
      Runtime: python2.7
      Role: !GetAtt 'UpdateALBIAMRole.Arn'
      Timeout: 300
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Ref 'LambdaZipFile'
      KmsKeyArn: !GetAtt 'KMSkey.Arn'
      Environment:
        Variables:
          ALB_DNS_NAME: !GetAtt [LoadBalancer, DNSName]
          NLB_TG_ARN: !Ref NLBTargetGroup
          S3_BUCKET: !Ref LambdaBucket
          MAX_LOOKUP_PER_INVOCATION: !Ref 'MAXDNSLookupPerInvocation'
          INVOCATIONS_BEFORE_DEREGISTRATION: !Ref 'InvocationBeforeDeregistration'
          CW_METRIC_FLAG_IP_COUNT: !Ref 'CWMetricFlagIPCount'
          ALB_LISTENER: !Ref 'ALBListenerPort'
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
        SubnetIds:
          - !Ref LambdaSubnet1
          - !Ref LambdaSubnet2
          - !Ref LambdaSubnet3
      Tags:
        - Key: 'Name'
          Value:
            Fn::Sub: ${TagPrefix}-UpdateLambda
  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: ScheduledRule
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
        - Arn: !GetAtt 'UpdateALBFunction.Arn'
          Id: TargetFunctionV1
  
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 'UpdateALBFunction.Arn'
      Principal: events.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !GetAtt 'ScheduledRule.Arn'

  UpdateALBIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: Lambda-ALBasTarget
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: LambdaLogging
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
              - Sid: S3
                Action:
                  - s3:Get*
                  - s3:Put*
                  - s3:CreateBucket
                  - s3:ListBucket
                  - s3:ListAllMyBuckets
                Effect: Allow
                Resource:
                  - !Join ['', ['arn:aws:s3:::', !Ref LambdaBucket]]
                  - !Join ['', ['arn:aws:s3:::', !Ref LambdaBucket, '/*']]
              - Sid: ELB
                Action:
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:RegisterTargets
                  - elasticloadbalancing:DeregisterTargets
                Effect: Allow
                Resource: '*'
              - Sid: CW
                Action:
                  - cloudwatch:putMetricData
                Effect: Allow
                Resource: '*'
              - Sid: LambdaVPC
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Effect: Allow
                Resource: '*'
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${TagPrefix}-LambdaUpdateRole

### Database ###

  MasterDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref 'DBName'
      AllocatedStorage: !Ref 'DBAllocatedStorage'
      DBInstanceClass: !Ref 'DBInstanceClass'
      DBSubnetGroupName: !Ref RDSSubnetGroup
      Engine: MySQL
      MasterUsername: !Ref 'DBUser'
      MasterUserPassword: !Ref 'DBPassword'
      MultiAZ: !Ref 'MultiAZ'
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${TagPrefix}-RDS
      VPCSecurityGroups:
        - !GetAtt DBEC2SecurityGroup.GroupId
      StorageEncrypted: true
      KmsKeyId: !Ref KMSkey
    DeletionPolicy: Delete


  ReplicaDB:
    Type: AWS::RDS::DBInstance
    Properties:
      SourceDBInstanceIdentifier: !Ref 'MasterDB'
      DBInstanceClass: !Ref 'DBInstanceClass'
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${TagPrefix}-RDSslave
      VPCSecurityGroups:
        - !GetAtt DBEC2SecurityGroup.GroupId

### Security Groups ###

  AppServerSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: HTTP from ALB, SSH from Jumpbox
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref 'ELBSecurityGroup'
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId: !Ref 'JumpboxSecurityGroup'
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-appserver-SG
      VpcId: !Ref 'VPC'

  ELBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: HTTP from anywhere
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-elb-SG
      VpcId: !Ref 'VPC'


  JumpboxSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: SSH from anywhere
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-jumpbox-SG
      VpcId: !Ref 'VPC'


  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MySQL from Appserver
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref 'AppServerSG'
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${TagPrefix}-RDS-SG
      VpcId: !Ref 'VPC'

  LambdaSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: HTTP to anywhere
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${TagPrefix}-lambda-SG
      VpcId: !Ref 'VPC'

### Public Network ACL ###

  ALBNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${TagPrefix}-ALB-NACL

  ALBSSHIngressNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId:
          Ref: ALBNetworkAcl
        RuleNumber: 100
        Protocol: 6
        RuleAction: allow
        Egress: false
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 22
          To: 22

  ALBHTTPIngressNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId:
          Ref: ALBNetworkAcl
        RuleNumber: 105
        Protocol: 6
        RuleAction: allow
        Egress: false
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 80
          To: 80

  ALBHTTPSIngressNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId:
          Ref: ALBNetworkAcl
        RuleNumber: 110
        Protocol: 6
        RuleAction: allow
        Egress: false
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 443
          To: 443

  ALBEphemeralIngressNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId:
          Ref: ALBNetworkAcl
        RuleNumber: 115
        Protocol: 6
        RuleAction: allow
        Egress: false
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 1024
          To: 65535

  ALBSSHEgressNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId:
          Ref: ALBNetworkAcl
        RuleNumber: 200
        Protocol: 6
        RuleAction: allow
        Egress: true
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 22
          To: 22

  ALBHTTPEgressNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId:
          Ref: ALBNetworkAcl
        RuleNumber: 205
        Protocol: 6
        RuleAction: allow
        Egress: true
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 80
          To: 80

  ALBHTTPSEgressNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId:
          Ref: ALBNetworkAcl
        RuleNumber: 210
        Protocol: 6
        RuleAction: allow
        Egress: true
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 443
          To: 443

  ALBEphemeralEgressNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId:
          Ref: ALBNetworkAcl
        RuleNumber: 215
        Protocol: 6
        RuleAction: allow
        Egress: true
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 1024
          To: 65535

### Private Network ACL ###

  ASGNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${TagPrefix}-ASG-NACL

  ASGSSHIngressNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId:
          Ref: ASGNetworkAcl
        RuleNumber: 100
        Protocol: 6
        RuleAction: allow
        Egress: false
        CidrBlock: 10.0.0.0/16
        PortRange:
          From: 22
          To: 22

  ASGHTTPIngressNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId:
          Ref: ASGNetworkAcl
        RuleNumber: 105
        Protocol: 6
        RuleAction: allow
        Egress: false
        CidrBlock: 10.0.0.0/16
        PortRange:
          From: 80
          To: 80

  ASGHTTPSIngressNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId:
          Ref: ASGNetworkAcl
        RuleNumber: 110
        Protocol: 6
        RuleAction: allow
        Egress: false
        CidrBlock: 10.0.0.0/16
        PortRange:
          From: 443
          To: 443

  ASGEphemeralIngressNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId:
          Ref: ASGNetworkAcl
        RuleNumber: 115
        Protocol: 6
        RuleAction: allow
        Egress: false
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 1024
          To: 65535

  ASGSSHEgressNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId:
          Ref: ASGNetworkAcl
        RuleNumber: 200
        Protocol: 6
        RuleAction: allow
        Egress: true
        CidrBlock: 10.0.0.0/16
        PortRange:
          From: 22
          To: 22

  ASGHTTPEgressNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId:
          Ref: ASGNetworkAcl
        RuleNumber: 205
        Protocol: 6
        RuleAction: allow
        Egress: true
        CidrBlock: 10.0.0.0/16
        PortRange:
          From: 80
          To: 80

  ASGHTTPSEgressNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId:
          Ref: ASGNetworkAcl
        RuleNumber: 210
        Protocol: 6
        RuleAction: allow
        Egress: true
        CidrBlock: 10.0.0.0/16
        PortRange:
          From: 443
          To: 443

  ASGEphemeralEgressNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId:
          Ref: ASGNetworkAcl
        RuleNumber: 215
        Protocol: 6
        RuleAction: allow
        Egress: true
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 0
          To: 65535

### Database Network ACL ###

  DatabaseNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${TagPrefix}-Database-NACL

  DatabaseIngressNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId:
          Ref: DatabaseNetworkAcl
        RuleNumber: 100
        Protocol: 6
        RuleAction: allow
        Egress: false
        CidrBlock: 10.0.0.0/16
        PortRange:
          From: 3306
          To: 3306

  DatabaseEgressNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId:
          Ref: DatabaseNetworkAcl
        RuleNumber: 110
        Protocol: 6
        RuleAction: allow
        Egress: true
        CidrBlock: 10.0.0.0/16
        PortRange:
          From: 0
          To: 65535

### Public NACL Associations ###

  ALBNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PubSubnet1
      NetworkAclId:
        Ref: ALBNetworkAcl

  ALBNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PubSubnet2
      NetworkAclId:
        Ref: ALBNetworkAcl

  ALBNetworkAclAssociation3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PubSubnet3
      NetworkAclId:
        Ref: ALBNetworkAcl

### Private NACL Associations ###

  ASGNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PriSubnet1
      NetworkAclId:
        Ref: ASGNetworkAcl

  ASGNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PriSubnet2
      NetworkAclId:
        Ref: ASGNetworkAcl

  ASGNetworkAclAssociation3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PriSubnet3
      NetworkAclId:
        Ref: ASGNetworkAcl

### Database NACL Associations ###

  DatabaseNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: DBSubnet1
      NetworkAclId:
        Ref: DatabaseNetworkAcl

  DatabaseNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: DBSubnet2
      NetworkAclId:
        Ref: DatabaseNetworkAcl

  DatabaseNetworkAclAssociation3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: DBSubnet3
      NetworkAclId:
        Ref: DatabaseNetworkAcl

### WAF ACL ###

  ## 1.
  ## OWASP Top 10 A1
  ## Mitigate SQL Injection Attacks
  ## Matches attempted SQLi patterns in the URI, QUERY_STRING, BODY, COOKIES
  wafSQLiSet:
    Type: AWS::WAFRegional::SqlInjectionMatchSet
    Properties:
      Name: !Join ['-', [!Ref TagPrefix, 'detect-sqli']]
      SqlInjectionMatchTuples:
        - FieldToMatch:
            Type: URI
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: URI
          TextTransformation: HTML_ENTITY_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          TextTransformation: HTML_ENTITY_DECODE
        - FieldToMatch:
            Type: BODY
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: BODY
          TextTransformation: HTML_ENTITY_DECODE
        - FieldToMatch:
            Type: HEADER
            Data: cookie
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: HEADER
            Data: cookie
          TextTransformation: HTML_ENTITY_DECODE
  wafSQLiRule:
    Type: AWS::WAFRegional::Rule
    Properties:
      MetricName: !Join ['', [!Ref TagPrefix, 'mitigatesqli']]
      Name: !Join ['-', [!Ref TagPrefix, 'mitigate-sqli']]
      Predicates:
        - Type: SqlInjectionMatch
          Negated: false
          DataId: !Ref wafSQLiSet

  ## 2.
  ## OWASP Top 10 A2
  ## Blacklist bad/hijacked JWT tokens or session IDs
  ## Matches the specific values in the cookie or Authorization header
  ## for JWT it is sufficient to check the signature

  wafAuthTokenStringSet:
    Type: AWS::WAFRegional::ByteMatchSet
    Properties:
      Name: !Join ['-', [!Ref TagPrefix, 'match-auth-tokens']]
      ByteMatchTuples:
        - FieldToMatch:
            Type: HEADER
            Data: cookie
          PositionalConstraint: CONTAINS
          TargetString: example-session-id
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: HEADER
            Data: authorization
          PositionalConstraint: ENDS_WITH
          TargetString: .TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
          TextTransformation: URL_DECODE
  wafAuthTokenRule:
    Type: AWS::WAFRegional::Rule
    Properties:
      MetricName: !Join ['', [!Ref TagPrefix, 'badauthtokens']]
      Name: !Join ['-', [!Ref TagPrefix, 'detect-bad-auth-tokens']]
      Predicates:
        - Type: ByteMatch
          Negated: false
          DataId: !Ref wafAuthTokenStringSet

  ## 3.
  ## OWASP Top 10 A3
  ## Mitigate Cross Site Scripting Attacks
  ## Matches attempted XSS patterns in the URI, QUERY_STRING, BODY, COOKIES
  wafXSSSet:
    Type: AWS::WAFRegional::XssMatchSet
    Properties:
      Name: !Join ['-', [!Ref TagPrefix, 'detect-xss']]
      XssMatchTuples:
        - FieldToMatch:
            Type: URI
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: URI
          TextTransformation: HTML_ENTITY_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          TextTransformation: HTML_ENTITY_DECODE
        - FieldToMatch:
            Type: BODY
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: BODY
          TextTransformation: HTML_ENTITY_DECODE
        - FieldToMatch:
            Type: HEADER
            Data: cookie
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: HEADER
            Data: cookie
          TextTransformation: HTML_ENTITY_DECODE
  wafXSSRule:
    Type: AWS::WAFRegional::Rule
    Properties:
      MetricName: !Join ['', [!Ref TagPrefix, 'mitigatexss']]
      Name: !Join ['-', [!Ref TagPrefix, 'mitigate-xss']]
      Predicates:
        - Type: XssMatch
          Negated: false
          DataId: !Ref wafXSSSet

  ## 4.
  ## OWASP Top 10 A4
  ## Path Traversal, LFI, RFI
  ## Matches request patterns designed to traverse filesystem paths, and include
  ## local or remote files

  wafPathsStringSet:
    Type: AWS::WAFRegional::ByteMatchSet
    Properties:
      Name: !Join ['-', [!Ref TagPrefix, 'match-rfi-lfi-traversal']]
      ByteMatchTuples:
        - FieldToMatch:
            Type: URI
          PositionalConstraint: CONTAINS
          TargetString: ../
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: URI
          PositionalConstraint: CONTAINS
          TargetString: ../
          TextTransformation: HTML_ENTITY_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          PositionalConstraint: CONTAINS
          TargetString: ../
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          PositionalConstraint: CONTAINS
          TargetString: ../
          TextTransformation: HTML_ENTITY_DECODE
        - FieldToMatch:
            Type: URI
          PositionalConstraint: CONTAINS
          TargetString: ://
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: URI
          PositionalConstraint: CONTAINS
          TargetString: ://
          TextTransformation: HTML_ENTITY_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          PositionalConstraint: CONTAINS
          TargetString: ://
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          PositionalConstraint: CONTAINS
          TargetString: ://
          TextTransformation: HTML_ENTITY_DECODE
  wafPathsRule:
    Type: AWS::WAFRegional::Rule
    Properties:
      MetricName: !Join ['', [!Ref TagPrefix, 'detectrfilfi']]
      Name: !Join ['-', [!Ref TagPrefix, 'detect-rfi-lfi-traversal']]
      Predicates:
        - Type: ByteMatch
          Negated: false
          DataId: !Ref wafPathsStringSet

  ## 5.
  ## OWASP Top 10 A4
  ## Privileged Module Access Restrictions
  ## Restrict access to the admin interface to known source IPs only
  ## Matches the URI prefix, when the remote IP isn't in the whitelist

  wafAdminUrlStringSet:
    Type: AWS::WAFRegional::ByteMatchSet
    Properties:
      Name: !Join ['-', [!Ref TagPrefix, 'match-admin-url']]
      ByteMatchTuples:
        - FieldToMatch:
            Type: URI
          PositionalConstraint: STARTS_WITH
          TargetString: !Ref AdminUrlPrefix
          TextTransformation: URL_DECODE
  wafAdminRemoteAddrIpSet:
    Type: AWS::WAFRegional::IPSet
    Properties:
      Name: !Join ['-', [!Ref TagPrefix, 'match-admin-remote-ip']]
      IPSetDescriptors:
        - Type: IPV4
          Value: !Ref AdminRemoteCidr
  wafAdminAccessRule:
    Type: AWS::WAFRegional::Rule
    Properties:
      MetricName: !Join ['', [!Ref TagPrefix, 'detectadminaccess']]
      Name: !Join ['-', [!Ref TagPrefix, 'detect-admin-access']]
      Predicates:
        - Type: ByteMatch
          Negated: false
          DataId: !Ref wafAdminUrlStringSet
        - Type: IPMatch
          Negated: true
          DataId: !Ref wafAdminRemoteAddrIpSet

  ## 6.
  ## OWASP Top 10 A5
  ## PHP Specific Security Misconfigurations
  ## Matches request patterns designed to exploit insecure PHP/CGI configuration

  wafPHPInsecureQSStringSet:
    Type: AWS::WAFRegional::ByteMatchSet
    Properties:
      Name: !Join ['-', [!Ref TagPrefix, 'match-php-insecure-var-refs']]
      ByteMatchTuples:
        - FieldToMatch:
            Type: QUERY_STRING
          PositionalConstraint: CONTAINS
          TargetString: _SERVER[
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          PositionalConstraint: CONTAINS
          TargetString: _ENV[
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          PositionalConstraint: CONTAINS
          TargetString: auto_prepend_file=
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          PositionalConstraint: CONTAINS
          TargetString: auto_append_file=
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          PositionalConstraint: CONTAINS
          TargetString: allow_url_include=
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          PositionalConstraint: CONTAINS
          TargetString: disable_functions=
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          PositionalConstraint: CONTAINS
          TargetString: open_basedir=
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          PositionalConstraint: CONTAINS
          TargetString: safe_mode=
          TextTransformation: URL_DECODE
  wafPHPInsecureURIStringSet:
    Type: AWS::WAFRegional::ByteMatchSet
    Properties:
      Name: !Join ['-', [!Ref TagPrefix, 'match-php-insecure-uri']]
      ByteMatchTuples:
        - FieldToMatch:
            Type: URI
          PositionalConstraint: ENDS_WITH
          TargetString: php
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: URI
          PositionalConstraint: ENDS_WITH
          TargetString: /
          TextTransformation: URL_DECODE
  wafPHPInsecureRule:
    Type: AWS::WAFRegional::Rule
    Properties:
      MetricName: !Join ['', [!Ref TagPrefix, 'detectphpinsecure']]
      Name: !Join ['-', [!Ref TagPrefix, 'detect-php-insecure']]
      Predicates:
        - Type: ByteMatch
          Negated: false
          DataId: !Ref wafPHPInsecureQSStringSet
        - Type: ByteMatch
          Negated: false
          DataId: !Ref wafPHPInsecureURIStringSet

  ## 7.
  ## OWASP Top 10 A7
  ## Mitigate abnormal requests via size restrictions
  ## Enforce consistent request hygene, limit size of key elements
  
  wafSizeRestrictionSet:
    Type: AWS::WAFRegional::SizeConstraintSet
    Properties:
      Name: !Join ['-', [!Ref TagPrefix, 'size-restrictions']]
      SizeConstraints:
        - FieldToMatch:
            Type: URI
          TextTransformation: NONE
          ComparisonOperator: GT
          Size: !Ref MaxExpectedURISize
        - FieldToMatch:
            Type: QUERY_STRING
          TextTransformation: NONE
          ComparisonOperator: GT
          Size: !Ref MaxExpectedQueryStringSize
        - FieldToMatch:
            Type: BODY
          TextTransformation: NONE
          ComparisonOperator: GT
          Size: !Ref MaxExpectedBodySize
        - FieldToMatch:
            Type: HEADER
            Data: cookie
          TextTransformation: NONE
          ComparisonOperator: GT
          Size: !Ref MaxExpectedCookieSize
  wafSizeRestrictionRule:
    Type: AWS::WAFRegional::Rule
    Properties:
      MetricName: !Join ['', [!Ref TagPrefix, 'restrictsizes']]
      Name: !Join ['-', [!Ref TagPrefix, 'restrict-sizes']]
      Predicates:
        - Type: SizeConstraint
          Negated: false
          DataId: !Ref wafSizeRestrictionSet


  ## 8.
  ## OWASP Top 10 A8
  ## CSRF token enforcement example
  ## Enforce the presence of CSRF token in request header
  wafCSRFMethodStringSet:
    Type: AWS::WAFRegional::ByteMatchSet
    Properties:
      Name: !Join ['-', [!Ref TagPrefix, 'match-csrf-method']]
      ByteMatchTuples:
        - FieldToMatch:
            Type: METHOD
          PositionalConstraint: EXACTLY
          TargetString: post
          TextTransformation: LOWERCASE
  wafCSRFTokenSizeConstraint:
    Type: AWS::WAFRegional::SizeConstraintSet
    Properties:
      Name: !Join ['-', [!Ref TagPrefix, 'match-csrf-token']]
      SizeConstraints:
        - FieldToMatch:
            Type: HEADER
            Data: !Ref CSRFExpectedHeader
          TextTransformation: NONE
          ComparisonOperator: EQ
          Size: !Ref CSRFExpectedSize
  wafCSRFRule:
    Type: AWS::WAFRegional::Rule
    Properties:
      MetricName: !Join ['', [!Ref TagPrefix, 'enforcecsrf']]
      Name: !Join ['-', [!Ref TagPrefix, 'enforce-csrf']]
      Predicates:
        - Type: ByteMatch
          Negated: false
          DataId: !Ref wafCSRFMethodStringSet
        - Type: SizeConstraint
          Negated: true
          DataId: !Ref wafCSRFTokenSizeConstraint

  ## 9.
  ## OWASP Top 10 A9
  ## Server-side includes & libraries in webroot
  ## Matches request patterns for webroot objects that shouldn't be directly accessible
  wafServerSideIncludeStringSet:
    Type: AWS::WAFRegional::ByteMatchSet
    Properties:
      Name: !Join ['-', [!Ref TagPrefix, 'match-ssi']]
      ByteMatchTuples:
        - FieldToMatch:
            Type: URI
          PositionalConstraint: STARTS_WITH
          TargetString: !Ref IncludesPrefix
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: URI
          PositionalConstraint: ENDS_WITH
          TargetString: .cfg
          TextTransformation: LOWERCASE
        - FieldToMatch:
            Type: URI
          PositionalConstraint: ENDS_WITH
          TargetString: .conf
          TextTransformation: LOWERCASE
        - FieldToMatch:
            Type: URI
          PositionalConstraint: ENDS_WITH
          TargetString: .config
          TextTransformation: LOWERCASE
        - FieldToMatch:
            Type: URI
          PositionalConstraint: ENDS_WITH
          TargetString: .ini
          TextTransformation: LOWERCASE
        - FieldToMatch:
            Type: URI
          PositionalConstraint: ENDS_WITH
          TargetString: .log
          TextTransformation: LOWERCASE
        - FieldToMatch:
            Type: URI
          PositionalConstraint: ENDS_WITH
          TargetString: .bak
          TextTransformation: LOWERCASE
        - FieldToMatch:
            Type: URI
          PositionalConstraint: ENDS_WITH
          TargetString: .backup
          TextTransformation: LOWERCASE
  wafServerSideIncludeRule:
    Type: AWS::WAFRegional::Rule
    Properties:
      MetricName: !Join ['', [!Ref TagPrefix, 'detectssi']]
      Name: !Join ['-', [!Ref TagPrefix, 'detect-ssi']]
      Predicates:
        - Type: ByteMatch
          Negated: false
          DataId: !Ref wafServerSideIncludeStringSet

  ## 10.
  ## Generic
  ## IP Blacklist
  ## Matches IP addresses that should not be allowed to access content
  wafBlacklistIpSet:
    Type: AWS::WAFRegional::IPSet
    Properties:
      Name: !Join ['-', [!Ref TagPrefix, 'match-blacklisted-ips']]
      IPSetDescriptors:
        # - Type: IPV4              # Required for NLB communication with internal ALB
        #   Value: 10.0.0.0/8
        - Type: IPV4
          Value: 192.168.0.0/16
        - Type: IPV4
          Value: 169.254.0.0/16
        - Type: IPV4
          Value: 172.16.0.0/16
        - Type: IPV4
          Value: 127.0.0.1/32
  wafBlacklistIpRule:
    Type: AWS::WAFRegional::Rule
    Properties:
      MetricName: !Join ['', [!Ref TagPrefix, 'blacklistedips']]
      Name: !Join ['-', [!Ref TagPrefix, 'detect-blacklisted-ips']]
      Predicates:
        - Type: IPMatch
          Negated: false
          DataId: !Ref wafBlacklistIpSet


  # # --
  # # WebACL containing the above rules evaluated in-order
  wafOwaspACL:
    Type: AWS::WAFRegional::WebACL
    Properties:
      MetricName: !Join ['', [!Ref TagPrefix, 'owaspacl']]
      Name: !Join ['-', [!Ref TagPrefix, 'owasp-acl']]
      DefaultAction:
        Type: ALLOW
      Rules:
        - Action:
            Type: !Ref RuleAction
          Priority: 10
          RuleId: !Ref wafSizeRestrictionRule
        - Action:
            Type: !Ref RuleAction
          Priority: 20
          RuleId: !Ref wafBlacklistIpRule
        - Action:
            Type: !Ref RuleAction
          Priority: 30
          RuleId: !Ref wafAuthTokenRule
        - Action:
            Type: !Ref RuleAction
          Priority: 40
          RuleId: !Ref wafSQLiRule
        - Action:
            Type: !Ref RuleAction
          Priority: 50
          RuleId: !Ref wafXSSRule
        - Action:
            Type: !Ref RuleAction
          Priority: 60
          RuleId: !Ref wafPathsRule
        - Action:
            Type: !Ref RuleAction
          Priority: 70
          RuleId: !Ref wafPHPInsecureRule
        # - Action:                         # Disable wafCSRFRule to enable POSTs to our example web app
        #     Type: !Ref RuleAction
        #   Priority: 80
        #   RuleId: !Ref wafCSRFRule
        - Action:
            Type: !Ref RuleAction
          Priority: 90
          RuleId: !Ref wafServerSideIncludeRule
        - Action:
            Type: !Ref RuleAction
          Priority: 100
          RuleId: !Ref wafAdminAccessRule

  webACLAssociation:
    Type: "AWS::WAFRegional::WebACLAssociation"
    Properties:
      ResourceArn: !Ref LoadBalancer
      WebACLId: !Ref wafOwaspACL

### GuardDuty ###

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription: []
      DisplayName: "GuardDuty Findings"

  SNSTopicPolicy:
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - sns:Publish
          Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Resource:
          - Ref: SNSTopic
      Topics:
      - Ref: SNSTopic
    Type: AWS::SNS::TopicPolicy
  
  SNSGuardDutySubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Ref: SnsEmail
      Protocol: email
      TopicArn: 
        Ref: SNSTopic
  
  eventsRule:
    Properties:
      EventPattern:
        source:
        - aws.guardduty
      State: ENABLED
      Targets:
      - Arn:
          Ref: SNSTopic
        Id: sns
    Type: AWS::Events::Rule

  guardDutyDetector:
    Type: AWS::GuardDuty::Detector
    Properties:
      Enable: true

### KMS ###
  KMSkey: 
    Type: AWS::KMS::Key
    Properties: 
      Description: "An example CMK"
      KeyPolicy: 
        Version: "2012-10-17"
        Id: "key-default-1"
        Statement:
        -
            Sid: "Enable IAM User Permissions"
            Effect: "Allow"
            Principal:
              AWS: !Join ['', ['arn:aws:iam::', !Ref "AWS::AccountId", ":root"]]
            Action: "kms:*"
            Resource: "*"
        - 
          Sid: "Allow specified user(s) to administer the key"
          Effect: "Allow"
          Principal: 
            AWS: !Join ['', ['arn:aws:iam::', !Ref "AWS::AccountId", ":user/", !Ref "KMSAdmin"]]
          Action: 
            - "kms:Create*"
            - "kms:Describe*"
            - "kms:Enable*"
            - "kms:List*"
            - "kms:Put*"
            - "kms:Update*"
            - "kms:Revoke*"
            - "kms:Disable*"
            - "kms:Get*"
            - "kms:Delete*"
            - "kms:ScheduleKeyDeletion"
            - "kms:CancelKeyDeletion"
          Resource: "*"
        - 
          Sid: "Allow specified user(s) to use the key"
          Effect: "Allow"
          Principal: 
            AWS: !Join ['', ['arn:aws:iam::', !Ref "AWS::AccountId", ":user/", !Ref "KMSUser"]]
          Action: 
            - "kms:DescribeKey"
            - "kms:Encrypt"
            - "kms:Decrypt"
            - "kms:ReEncrypt*"
            - "kms:GenerateDataKey"
            - "kms:GenerateDataKeyWithoutPlaintext"
          Resource: "*"

### S3 ###

  LambdaS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref LambdaBucket
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

                  
Outputs:
  URL:
    Description: URL of the website
    Value: !Join ['', ['http://', !GetAtt [NetworkLoadBalancer, DNSName]]]
  MasterJDBCConnectionString:
    Description: JDBC connection string for the master database
    Value: !Join ['', ['jdbc:mysql://', !GetAtt [MasterDB, Endpoint.Address], ':',
        !GetAtt [MasterDB, Endpoint.Port], /, !Ref 'DBName']]
  ReplicaJDBCConnectionString:
    Description: JDBC connection string for the replica database
    Value: !Join ['', ['jdbc:mysql://', !GetAtt [ReplicaDB, Endpoint.Address], ':',
        !GetAtt [ReplicaDB, Endpoint.Port], /, !Ref 'DBName']]